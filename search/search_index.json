{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About this Project","text":"<p>Insecure software is undermining our financial, healthcare, defense, energy, and other critical infrastructure worldwide. As our digital, global infrastructure gets increasingly complex and interconnected, the difficulty of achieving application security increases exponentially. We can no longer afford to tolerate relatively simple security problems.</p>"},{"location":"#aim-objective","title":"Aim &amp; Objective","text":"<p>The goal of the OWASP Top 10 Proactive Controls project is to raise awareness about application security by describing the most important areas of concern that software developers must be aware of. We encourage you to use the OWASP Proactive Controls to get your developers started with application security. Developers can learn from the mistakes of other organizations. We hope that the OWASP Proactive Controls is useful to your efforts in building secure software.</p>"},{"location":"#target-audience","title":"Target Audience","text":"<p>This document is primarily written for developers. However, development managers, product owners, Q/A professionals, program managers, and anyone involved in building software can also benefit from this document.</p>"},{"location":"#how-to-use-this-document","title":"How to Use this Document","text":"<p>This document\u2019s main purpose is to provide a solid foundation of topics to help drive introductory software security developer training. To be effective, these controls should be used consistently and thoroughly throughout all applications.</p> <p>However, this document is a starting point rather than a comprehensive set of techniques and practices.</p> <p>A fully secure development process should include comprehensive requirements from a standard such as the OWASP ASVS in addition to including a range of software development activities described in maturity models such as OWASP SAMM and BSIMM.</p>"},{"location":"#project-leaders","title":"Project Leaders","text":"<ul> <li>Andreas Happe, connect through linkedin, github, twitter/x</li> <li>Jim Manico, connect through linkedin, github, twitter/x</li> <li>Katy Anton, connect through linkedin, github, twitter/x</li> </ul>"},{"location":"#copyright-and-licence","title":"Copyright and Licence","text":"<p>This document is released under the Creative Commons Attribution-ShareAlike 4.0 International license. For any reuse or distribution, you must make it clear to others the license terms of this work.</p>"},{"location":"final-word/","title":"Final word","text":"<p>This document should be seen as a starting point rather than a comprehensive set of techniques and practices. We want to again emphasize that this document is intended to provide initial awareness around building secure software.</p> <p>Good next steps to help build an application security program include:</p> <ol> <li>To understand some of the risks in web application security please review the OWASP Top Ten .</li> <li>A secure development program should include a comprehensive list of security requirements .  Use Threat Modeling to identify potential security threats, derive security requirements, and tailor security controls to prevent those. Use standards such as the OWASP (Web) ASVS and the OWASP (Mobile) MASVS which provides a catalog of available security requirements along with the  relevant verification criteria.</li> <li>To understand the core building blocks of a secure software program from a more macro point of view please review the OWASP OpenSAMM project.</li> </ol>"},{"location":"about-top-10/contributors/","title":"Contributors","text":"<p>This document would not have been possible without our contributors for which we are grateful.</p> <p>From the shared 2024 document and according to github:</p> <ul> <li>Chris Romeo</li> <li>Jasmin Mair</li> <li>Abdessamad Temmar</li> <li>Carl Sampson</li> <li>Eyal Estrin</li> <li>Israel Chorzevski</li> <li>Zoe Braiterman</li> <li>Timo Pagel</li> <li>ThreeHoolagins</li> <li>Wallace Soares</li> <li>Aref Shaheed</li> <li>ThunderSon</li> <li>Marcus Fenstrom</li> <li>Datz</li> <li>Josh Grossman</li> <li>Tomas Coiro</li> <li>Dr. Pi3ch</li> <li>Ishaq Mohammed</li> <li>Richard Tweed</li> <li>Derek Gary</li> <li>Starr Brown</li> <li>Thomas</li> <li>Christian Capellan</li> <li>Adriaan Joubert</li> </ul>"},{"location":"about-top-10/contributors/#contributors-from-previous-versions","title":"Contributors from previous versions","text":"<ul> <li>Massimiliano Graziani (Italian Translation)</li> <li>Taras Ivashchenko  (Russian Translation)</li> <li>Jay Zudilin (Russian Translation)</li> <li>Danny Harris</li> <li>Hiroaki Kuramochi (Japanese Translation)</li> <li>Hiroshi Fujimoto (Japanese Translation)</li> <li>Hidenori Nagai (Japanese Translation)</li> <li>Riotaro OKADA (Japanese Translation)</li> <li>Robert Dracea (Japanese Translation)</li> <li>Koichiro Watanabe (Japanese Translation)</li> <li>Tony Hsu Hsiang Chih (Chinese Translation)</li> <li>Cyrille Grandval (French Translation)</li> <li>Fr\u00e9d\u00e9ric Baillon (French Translation)</li> <li>Danny Harris</li> <li>Stephen de Vries</li> <li>Andrew Van Der Stock</li> <li>Gaz Heyes</li> <li>Colin Watson</li> <li>Jason Coleman</li> <li>Cassio Goldschmidt</li> <li>Dan Anderson</li> <li>David Cybuck</li> <li>Dave Ferguson</li> <li>Osama Elnaggar</li> <li>Rick Mitchell</li> </ul>"},{"location":"about-top-10/in-the-news/","title":"OWASP Top 10 Proactive Controls in the News","text":""},{"location":"about-top-10/in-the-news/#2024","title":"2024","text":"<p>Introduction of the OWASP Top 10 Proactive Controls v4 and switch to new wiki system.</p> <ul> <li>[6 Feb 2024] Featured in <code>gbhackers.</code> post OWASP Top 10 Proactive Security Controls For Software Developers to Build Secure Software</li> </ul>"},{"location":"about-top-10/in-the-news/#2022","title":"2022","text":"<ul> <li>[10 Nov 2022] Blog Post by Kerr</li> <li>[13 June 2022] Featured on the GitHub Blog</li> </ul>"},{"location":"about-top-10/in-the-news/#2021","title":"2021","text":"<ul> <li>[12 Feb 2021] Featured in oneconsult's post OWASP Top 10 Proactive Controls \u2013 Teil 1</li> </ul>"},{"location":"about-top-10/in-the-news/#2020","title":"2020","text":"<ul> <li>[5 Nov 2020] Featured by Snyk in Developing secure software: how to implement the OWASP top 10 Proactive Controls</li> </ul>"},{"location":"about-top-10/in-the-news/#2019","title":"2019","text":"<ul> <li>[July 2019] Featured in Coursera course from UCDavies     Identifying Security Vulnerabilities</li> <li>[23 June 2019] Featured on HackerCombat: Implement OWASP Proactive Controls to Work</li> <li>[7 June 2019] Feature on OWASP DevSlop Show Proactive Controls</li> <li>[15 May 2019] Featured in TechBeacon: Put OWASP Top 10 Proactive Controls to work</li> <li>[2 Mar 2019] Webinar: The OWASP Top Ten Proactive Controls with Jim Manico</li> </ul>"},{"location":"about-top-10/in-the-news/#2018","title":"2018","text":"<p>The OWASP Top 10 Proactive Controls 2018 (v3) were released.</p> <ul> <li>[Dec 2018] Featured as the resource for Security \u201cShifting to the Left\u201d! in the ISC2 course: \"DevSecOps: Integrating Security into DevOps\u201d</li> <li>[20 Sep 2018] Featured in TechBeacon: OWASP Top 10 Proactive Controls 2018: How it makes your code more secure</li> <li>[17 Sep 2018] Binary Blogger Podcast Episodes: OWASP Top 10 Proactive Controls Podcast Episodes</li> <li>[9 May 2018] Featured in Developer's security guide: 50 online resources to shift left</li> <li>[7 May 2018] 3.0 released!</li> </ul>"},{"location":"about-top-10/in-the-news/#2017","title":"2017","text":"<ul> <li>[11 Aug 2017] Presented at Northeast PHP Conference</li> <li>[25 July 2017] Podcast about at OWASP Top 10 Proactive Controls</li> <li>[12 May 2017] Presented at AppSec EU'17 -    Belfast</li> <li>[14 Feb 2017] Featured in Managing Cloud Infrastructure to Prevent Security    Gaps</li> <li>[Feb 2017 ] Featured in \"Application Security Program: Protect    Against Data Breaches\"</li> </ul>"},{"location":"about-top-10/in-the-news/#2016","title":"2016","text":"<p>The OWASP Top 10 Proactive Controls 2016 (v2) were released on Jan, 14th 2016.</p> <ul> <li>[1 Oct 2016] Presented at PHPNW16</li> <li>[5 July 2016] Featured in Incorporating Security Best Practices     into Agile   Teams</li> <li>[June 2016 ] Featured in A Transformative Approach to Secure    Systems    Delivery</li> <li>[2 June 2016] Featured in DevOpsSec - Securing Software through    Continuous    Delivery</li> </ul>"},{"location":"about-top-10/old-versions-and-translations/","title":"Old Versions and Translations","text":"<p>Starting with version <code>v4</code> in 2024, we don't accept inclusion of translations into the OWASP Top 10 Proactive Controls directly and are only providing the English version.</p> <p>We do encourage translators to create translated versions and host them themselves and will link to those external sites/documents if notified about them.</p>"},{"location":"about-top-10/old-versions-and-translations/#owasp-top-10-proactive-controls-2018-v3","title":"OWASP Top 10 Proactive Controls 2018 (v3)","text":"<p>You can find the OWASP Top 10 Proactive Controls 2018 (vv) on GitHub:</p> <ul> <li>English version: pdf, docx, pptx</li> <li>Available Translations (in alphabetical order):</li> <li>Arabic: pdf</li> <li>Brazilian Portuguese: pdf</li> <li>Chinese: pdf</li> <li>Italian: pdf</li> <li>Spanish: pdf</li> <li>Polish: pdf</li> <li>Russian: pdf</li> </ul> <p>We also provide a Mapping to the OWASP Top 10 and IEEE Top 10.</p>"},{"location":"about-top-10/old-versions-and-translations/#owasp-top-10-proactive-controls-2016-v2","title":"OWASP Top 10 Proactive Controls 2016 (v2)","text":"<p>You can find the OWASP Top 10 Proactive Controls 2016 (v2) on GitHub:</p> <ul> <li>English version: pdf, docx, pptx</li> <li>Available Translations (in alphabetical order):</li> <li>Chinese: pdf</li> <li>Hebrew: pdf</li> <li>Japanese: pdf</li> <li>Simplified Chinese: pdf</li> </ul>"},{"location":"about-top-10/old-versions-and-translations/#owasp-top-10-proactive-controls-2014-v1","title":"OWASP Top 10 Proactive Controls 2014 (v1)","text":"<p>They might be somewhere..</p>"},{"location":"introduction/about-owasp/","title":"About OWASP","text":"<p>The Open Worldwide Application Security Project (OWASP) is an open community dedicated to enabling organizations to develop, purchase, and maintain applications and APIs that can be trusted.</p> <p>All OWASP tools, documents, videos, presentations, and chapters are free and open to anyone interested in improving application security.</p> <p>We advocate approaching application security as a people, process, and technology problem, because the most effective approaches to application security require improvements in these areas.</p> <p>OWASP is a new kind of organization. Our freedom from commercial pressures allows us to provide unbiased, practical, and cost-effective information about application security.</p> <p>OWASP is not affiliated with any technology company, although we support the informed use of commercial security technology. OWASP produces many types of materials in a collaborative, transparent, and open way.</p> <p>The OWASP Foundation is the non-profit entity that ensures the project's long-term success. Almost everyone associated with OWASP is a volunteer, including the OWASP board, chapter leaders, project leaders, and project members. We support innovative security research with grants and infrastructure.</p>"},{"location":"introduction/contributing/","title":"How to Contribute?","text":"<p>Please don\u2019t hesitate to contact the OWASP Proactive Control project with your questions, comments, and ideas.</p> <p>You can contact maintainers directly, use our project-top10-proactive-controls OWASP slack channel, or visit our github page.</p> <p>You find the source code of the current version of the OWASP Top 10 Proactive Controls in the <code>docs/</code> directory within the git repository.</p> <p>When you check our open issues on github, you can see that some issues are tagged with <code>help wanted</code> or <code>good first issue</code>. Choose these if you want to help out the project!</p>"},{"location":"introduction/contributing/#how-to-test-the-owasp-proactive-control-website-locally","title":"How to test the OWASP Proactive Control website locally?","text":"<p>If you can run python, you can locally run the OWASP Proactive Control website locally. We recommend this to test your changes before pushing them to github.</p> <p>To do this, we will use <code>venv</code> to create a local python environment to install the needed <code>mkdocs</code> package.</p> <pre><code># creates and activates a new python environment in a new `venv` directory\n$ python3 -m venv venv\n$ source venv/bin/activate\n\n# install the mkdocs package\n$ pip install mkdocs-material\n\n# switch into your checked-out OWASP Proactive Controls directory\n$ cd owasp-proactive-controls\n\n# run the local webserver\n$ mkdocs server\n\n# now you can point your browser to http://localhost:8000 and check\n# how your changes will look like\n</code></pre>"},{"location":"introduction/related-owasp-projects/","title":"Related OWASP Projects","text":"<p>OWASP is a volunteer-driven organization. Those volunteers contributed many useful documents, and this section points to some related OWASP documents and projects:</p>"},{"location":"introduction/related-owasp-projects/#owasp-top-10","title":"OWASP Top 10","text":"<p>The best-known OWASP document is the OWASP Top 10. They detail the most common web application vulnerabilities and are also the base for this document. In contrast, this document is focused on defensive techniques and controls as opposed to risks. Each control in this document will map to one or more items in the risk-based OWASP Top 10. This mapping information is included at the end of each control description.</p>"},{"location":"introduction/related-owasp-projects/#owasp-asvs","title":"OWASP ASVS","text":"<p>The OWASP Application Security Verification Standard (ASVS) is a catalog of available security requirements and verification criteria. OWASP ASVS can be a source of detailed security requirements for development teams. Security requirements are categorized into different buckets based on a shared higher order security function. For example, the ASVS contains categories such as authentication, access control, error handling / logging, and web services. Each category contains a collection of requirements that represent the best practices for that category drafted as verifiable statements.</p>"},{"location":"introduction/related-owasp-projects/#owasp-samm","title":"OWASP SAMM","text":"<p>Software Assurance Maturity Model (SAMM) is an open framework to help organizations implement a strategy for maturing the software security tailored to the specific risks of the organization. . SAMM supports the complete software lifecycle and can be used to identify what</p>"},{"location":"introduction/related-owasp-projects/#threat-modeling-in-general","title":"Threat Modeling in General","text":"<p>Threat Modeling is an important part of secure application development, which can help identify potential security threats, derive security requirements, and tailor security controls to prevent potential threats. Successful use of security requirements involves four steps: discovery, documentation, implementation, and verification of the correct implementation of the functionality within an application. Threat modelling is one way to derive security requirements. Other sources are: industry standards, applicable laws, history of past vulnerabilities. Modeling tools, like OWASP Threat Dragon can be used to create threat model diagrams as part of a secure development lifecycle.</p>"},{"location":"introduction/related-owasp-projects/#domain-specific-documents","title":"Domain-Specific Documents","text":"<p>It is important to notice that this document primarily focuses on web applications, but other Top 10s could apply to your application, too. Examples of those are:</p> <ul> <li>OWASP API Top 10</li> <li>OWASP Mobile Application Top 10</li> </ul>"},{"location":"the-top-10/c1-accesscontrol/","title":"C1: Implement Access Control","text":""},{"location":"the-top-10/c1-accesscontrol/#description","title":"Description","text":"<p>Access Control (or Authorization) is allowing or denying specific requests from a user, program, or process. With each access control decision, a given subject requests access to a given object. Access control is the process that considers the defined policy and determines if a given subject is allowed to access a given object. Access control also involves the act of granting and revoking those privileges. Access Control often applies on multiple levels, e.g., given an application with a database backend, it applies both on the business logic level as well as on a database row level. In addition, applications can offer multiple ways of performing operations (e.g., through APIs or the website). All those different levels and access paths must be aligned, i.e., use the same access control checks, to protect against security vulnerabilities. Authorization (verifying access to specific features or resources) is not equivalent to authentication (verifying identity).</p>"},{"location":"the-top-10/c1-accesscontrol/#threats","title":"Threats","text":"<ul> <li>An attacker could take advantage of a loosely configured access control policy to access data the organization did not intend to make accessible.</li> <li>An attacker could discover multiple access control components within an application and exploit the weakest.</li> <li>An administrator could forget to decommission an old account, and an attacker could discover that account and use it to access data.</li> <li>An attacker could gain access to data that had a policy that dropped into a final step of allowing access. (Lack of default deny)</li> </ul>"},{"location":"the-top-10/c1-accesscontrol/#implementation","title":"Implementation","text":"<p>Below is a minimum set of access control design requirements that should be considered at the initial stages of application development.</p>"},{"location":"the-top-10/c1-accesscontrol/#1-design-access-control-thoroughly-up-front","title":"1) Design Access Control Thoroughly Up Front","text":"<p>Once you have chosen a specific access control design pattern, it is often difficult and time-consuming to re-engineer access control in your application with a new pattern. Access Control is one of the main areas of application security design that must be thoroughly designed up front, especially when addressing requirements like multi-tenancy and horizontal (data dependent) access control.</p> <p>Two core types of access control design should be considered.</p> <ul> <li>Role Based Access Control (RBAC) is a model for controlling access to resources where permitted actions on resources are identified with roles rather than with individual subject identities.</li> <li>Attribute Based Access Control (ABAC) will grant or deny user access based on arbitrary attributes of the user and arbitrary attributes of the object, and environment conditions that may be globally recognized, and more relevant to the policies at hand. Access Control design may start simple but can often become complex and feature-heavy security control. When evaluating the access control capability of software frameworks, ensure that your access control functionality will allow for customization for your specific access control feature need.</li> </ul>"},{"location":"the-top-10/c1-accesscontrol/#2-force-every-access-request-to-go-through-an-access-control-check","title":"2) Force Every Access Request to Go Through an Access Control Check","text":"<p>Ensure that all access requests are forced to go through an access control verification layer. Technologies like Java filters or other automatic request processing mechanisms are ideal programming components that will ensure that all requests go through an access control check. This is referred to as Policy Enforcement Point in RFC 2904.</p>"},{"location":"the-top-10/c1-accesscontrol/#3-consolidate-the-access-control-check","title":"3) Consolidate the access control check","text":"<p>Use a single access control procedure or routine. This prevents the scenario where you have multiple access control implementations, where most are correct, but some are flawed. By using a centralized approach, you can focus security resources on reviewing and fixing one central library or function that performs the access control check, and then reuse it throughout your code base and organization.</p>"},{"location":"the-top-10/c1-accesscontrol/#4-deny-by-default","title":"4) Deny by Default","text":"<p>Ensure that by default, all the requests are denied, unless they are specifically allowed. This also includes accessing API (REST or webhooks) with missing access controls. There are many ways that this rule will manifest in the application code. Some examples are:</p> <ol> <li> <p>Application code may throw an error or exception while processing access control requests. In these cases, access control should always be denied.</p> </li> <li> <p>When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.</p> </li> <li> <p>When a new feature is added to an application, all users should be denied to use it until it\u2019s properly configured.</p> </li> </ol>"},{"location":"the-top-10/c1-accesscontrol/#5-principle-of-least-privilege-just-in-time-jit-just-enough-access-jea","title":"5) Principle of Least Privilege / Just in Time (JIT), Just Enough Access (JEA)","text":"<p>An example of implementing that principle is to create dedicated privileged roles and accounts for every organization function that requires highly privileged activities and avoid using an \u201cadmin\u201d role/account that is fully privileged daily.</p> <p>To further improve the security, you can implement Just-in-Time (JIT) or Just-enough-Access (JEA): ensure that all users, programs, or processes are only given just enough access to achieve their current mission. This access should be provided just in time, when the subject makes the request, and the access should be granted for a short time. Be wary of systems that do not provide granular access control configuration capabilities.</p>"},{"location":"the-top-10/c1-accesscontrol/#6-do-not-hardcode-roles","title":"6) Do not Hardcode Roles","text":"<p>Many application frameworks default to access control that is role based. It is common to find application code filled with checks of this nature.</p> <pre><code>if (user.hasRole(\"ADMIN\")) || (user.hasRole(\"MANAGER\")) {\n    deleteAccount();\n}\n</code></pre> <p>Be careful about this type of role-based programming in code. It has the following limitations or dangers:</p> <ul> <li>Role-based programming of this nature is fragile. It is easy to create incorrect or missing role checks in code.</li> <li>Hard-Coded Roles do not allow for multi-tenancy. Extreme measures like forking the code or adding checks for each customer will be required to allow role-based systems to have different rules for different customers.</li> <li>Large code bases with many access control checks can make it difficult to audit or verify the overall application access control policy.</li> <li>Hard coded roles can also be seen as a backdoor when discovered during audits.</li> </ul>"},{"location":"the-top-10/c1-accesscontrol/#7-abac-policy-enforcement-point-example","title":"7) ABAC Policy Enforcement Point Example","text":"<p>Please consider the following access control enforcement points using this following programming methodology:</p> <pre><code>if (user.hasPermission(\"DELETE_ACCOUNT\")) {\n    deleteAccount();\n}\n</code></pre> <p>Attribute or feature-based access control checks of this nature are the starting point to building well-designed and feature-rich access control systems. This type of programming also allows for greater access control customization capability over time.</p>"},{"location":"the-top-10/c1-accesscontrol/#vulnerabilities-prevented","title":"Vulnerabilities Prevented","text":"<ul> <li>OWASP Top 10 2021-A01_2021-Broken Access Control</li> <li>CWE Top 25 - 11:CWE-862 Missing Authorization</li> <li>CWE Top 25 - 24:CWE-863 Incorrect Authorization</li> </ul>"},{"location":"the-top-10/c1-accesscontrol/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Authorization Cheat Sheet</li> <li>OWASP Cheat Sheet: Logging Cheat Sheet</li> <li>OWASP ASVS V4 Access Control</li> <li>OWASP Testing Guide: Authorization Testing</li> <li>OAuth2.0 protocol for authorization</li> <li>Draft OAuth2.1</li> <li>Policy Enforcement in RFC 2904</li> </ul>"},{"location":"the-top-10/c1-accesscontrol/#tools","title":"Tools","text":"<ul> <li>ZAP with the optional Access Control Testing add-on</li> <li>Open Policy Agent</li> </ul>"},{"location":"the-top-10/c10-stop-server-side-request-forgery/","title":"C10: Stop Server Side Request Forgery","text":""},{"location":"the-top-10/c10-stop-server-side-request-forgery/#description","title":"Description","text":"<p>While Injection Attacks typically target the victim server itself, Server-Side Request Forgery (SSRF) attacks try to coerce the server to perform a request on behalf of the attacker. Why is this beneficial for the attacker? The outgoing request will be performed with the identity of the victim server and thus the attacker might execute operations with elevated operations.</p>"},{"location":"the-top-10/c10-stop-server-side-request-forgery/#threats","title":"Threats","text":"<p>Examples of this contain:</p> <ul> <li>If an SSRF attack is possible on an server within the DMZ, an attacker might be able to access other servers within the DMZ without passing a perimeter firewall</li> <li>Many servers have local services running on localhost, often without any authentication/authorization as localhost. This can be abused by SSRF attacks.</li> <li>If SSO is used, SSRF can be used to extract tokens/tickets/hashes from servers etc.</li> </ul>"},{"location":"the-top-10/c10-stop-server-side-request-forgery/#implementation","title":"Implementation","text":"<p>There multiple ways of preventing SSRF:</p> <ul> <li>Input validation</li> <li>If outgoing requests have to be made, check the target against an allow-list</li> <li>If using XML, configure parsers securely to prevent XEE Be aware of Unicode and other Character transformations when performing input validation.</li> </ul>"},{"location":"the-top-10/c10-stop-server-side-request-forgery/#vulnerabilities-prevented","title":"Vulnerabilities Prevented","text":"<ul> <li>A10:2021 \u2013 Server-Side Request Forgery (SSRF)</li> </ul>"},{"location":"the-top-10/c10-stop-server-side-request-forgery/#references","title":"References","text":"<ul> <li>Server-Side Request Forgery Prevention Cheat Sheet</li> <li>A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!</li> </ul>"},{"location":"the-top-10/c10-stop-server-side-request-forgery/#tools","title":"Tools","text":"<ul> <li>SSRFmap</li> </ul>"},{"location":"the-top-10/c2-crypto/","title":"C2: Use Cryptography the proper way","text":""},{"location":"the-top-10/c2-crypto/#description","title":"Description","text":"<p>Sensitive data such as passwords, credit card numbers, health records, personal information and business secrets require extra protection, particularly if that data falls under privacy laws (EU\u2019s General Data Protection Regulation GDPR), financial data protection rules such as PCI Data Security Standard (PCI DSS) or other regulations.</p> <p>Attackers can steal data from web and web service applications in a number of ways. For example, if sensitive information is sent over the internet without communications security, then an attacker on a shared wireless connection could capture and steal another user\u2019s data. Also, an attacker could use SQL Injection to steal passwords and other credentials from an applications database and expose that information to the public.</p> <p>Privacy is assurance that the confidentiality of, and access to, certain information about an entity is protected. Users of the things developers build want their information protected from disclosure.</p> <p>Protect sensitive data such as passwords, credit card numbers, health records, personal information, and business secrets.</p> <p>Regulations exist to force companies to protect user\u2019s personal information. The European Union values individual privacy, such that they created the EU General Data Protection Regulation GDPR. Financial data protection rules such as PCI Data Security Standard (PCI DSS) also exist to protect cardholder privacy.</p> <p>Cryptography is the art or science concerning the principles, means, and methods for rendering plain information unintelligible and restoring encrypted information to intelligible form. Individual user data requires cryptography to ensure it is properly cared for when stored.</p>"},{"location":"the-top-10/c2-crypto/#classify-data-types-in-your-application","title":"Classify data types in your application","text":"<p>It\u2019s critical to classify data in your system and determine which level of sensitivity each piece of data belongs to. Each data category can then be mapped to protection rules necessary for each level of sensitivity. For example, public marketing information that is not sensitive may be categorized as public data which is ok to place on the public website. Credit card numbers may be classified as private user data which will need to be encrypted while stored, processed or in transit.</p> <p>Data classification can also be mandated by legislation, e.g., GDPR when serving users within the European Union.</p> <p>Classify the data sent, processed, and stored in your system and determine what level of sensitivity the data belongs to. Categorize the data to define specific protection rules for each type. The rule creation enables your team to perform data minimization and try not to store sensitive data whenever possible.</p> <p>For example, public marketing information that is not sensitive may be categorized as public data, which is okay to place on the public website and does not need to be encrypted. Credit card numbers need to be encrypted while stored, processed, and in transit.</p>"},{"location":"the-top-10/c2-crypto/#threats","title":"Threats","text":"<ul> <li>An attacker could exploit weak or outdated encryption algorithms to decrypt sensitive information.</li> <li>Improperly stored encryption keys could be compromised, leading to unauthorized data access.</li> <li>An attacker can perform SQL Injection attacks to steal encrypted data from databases.</li> <li>Failure to implement proper key management could result in unauthorized access to encrypted data.</li> </ul>"},{"location":"the-top-10/c2-crypto/#implementation","title":"Implementation","text":"<p>When it comes to cryptography, there are a few simple rules:</p> <ul> <li>Never transmit plain-text data. The technical capability exists to easily encrypt all data that is sent between any point A and B. Embrace the use of cryptography to protect all data at rest and in transit.</li> <li>Do not create your own cryptographic protocols. The creation of a cryptographic protocol is a tricky proposition. When NIST created AES, they had an open competition where the best cryptographers worldwide submitted proposals and then looked for flaws in the other proposals. Instead of using your developer cycles to create a new crypto protocol, use an existing, battle-tested standard. Focus your innovation on making your feature or product better.</li> <li>Do not implement cryptographic routines. Use an existing library that implements cryptographic routines.</li> </ul>"},{"location":"the-top-10/c2-crypto/#protect-data-at-rest","title":"Protect data at rest","text":"<p>The first rule of sensitive data management is to avoid storing sensitive data when at all possible. If you must store sensitive data then make sure it is cryptographically protected in some way to avoid unauthorized disclosure and modification. Cryptography (or crypto) is one of the more advanced topics of information security and one whose understanding requires the most schooling and experience. It is difficult to get right because there are many approaches to encryption, each with advantages and disadvantages that need to be thoroughly understood by web solution architects and developers. In addition, serious cryptography research is typically based on advanced mathematics and number theory, providing a serious barrier to entry. Designing or building cryptographic algorithms is very error-prone (see side-channel attacks). Instead of building cryptographic capability from scratch, it is strongly recommended that peer-reviewed and open solutions be used, such as the Google <code>Tink</code> project, <code>Libsodium</code>, and secure storage capability built into many software frameworks and cloud services.</p>"},{"location":"the-top-10/c2-crypto/#store-passwords-safely","title":"Store passwords safely","text":"<p>Most web applications will face the challenge of storing user\u2019s passwords to set up authentication services. Store the passwords safely to ensure an attacker cannot quickly obtain them. Do not store the passwords in plain text anywhere in the database. Always use a hashing function to store passwords. Enhance the hashing function by adding a random salt for each item to increase the randomness of hashes.</p>"},{"location":"the-top-10/c2-crypto/#special-case-application-secrets-management","title":"Special Case: Application Secrets management","text":"<p>Applications contain numerous \u201csecrets\u201d that are needed for security operations. These include certificates, SQL connection passwords, third party service account credentials, passwords, SSH keys, encryption keys and more. The unauthorized disclosure or modification of these secrets could lead to complete system compromise. In managing application secrets, consider the following: Don\u2019t store secrets in code, config files or pass them through environment variables. Use tools like GitRob or TruffleHog to scan code repos for secrets. Your code should be written in a way that even if your code would be disclosed, e.g., due to a defective configured github repository, your running applications are still secure. Keep keys and your other application-level secrets in a secrets vault like KeyWhiz or Hashicorp\u2019s Vault project , Amazon KMS, or AWS Secrets Manager to provide secure storage and access to application-level secrets at run-time. Many web-frameworks such as Ruby on Rails provide integrated ways of dealing with secrets and credentials.</p>"},{"location":"the-top-10/c2-crypto/#key-lifecycle","title":"Key Lifecycle","text":"<p>Secret keys are used in applications with a number of sensitive functions. For example, secret keys can be used to sign JWTs, protect credit cards, provide various forms of authentication as well as facilitate other sensitive security features. In managing keys, a number of rules should be followed including</p> <ul> <li>Ensure that any secret key is protected from unauthorized access</li> <li>All authorized access to a secret key is logged for forensic purposes</li> <li>Store keys in a proper secrets vault as described below</li> <li>Use independent keys when multiple keys are required</li> <li>Build support for changing cryptographic algorithms to prepare for future needed changes</li> <li>Build application features to support and handle key rotation gracefully. This can happen on a periodic base or after a key has been compromised.</li> </ul>"},{"location":"the-top-10/c2-crypto/#protect-data-in-transit","title":"Protect data in transit","text":"<p>Sensitive data such as passwords, credit card numbers, health records, personal information and business secrets require extra protection, particularly if that data falls under privacy laws (EU\u2019s General Data Protection Regulation GDPR), financial data protection rules such as PCI Data Security Standard (PCI DSS) or other regulations. Attackers can steal data from web and web service applications in a number of ways. For example, if sensitive information is sent over the internet without communications security, then an attacker on a shared wireless connection could capture and steal another user\u2019s data. Also, an attacker could use SQL Injection to steal passwords and other credentials from an applications database and expose that information to the public.</p>"},{"location":"the-top-10/c2-crypto/#use-current-cryptographic-protocols","title":"Use current cryptographic protocols","text":"<p>When developing web applications, use TLSv1.2 or TLSv1.3, preferably TLSv1.3. If possible, investigate the usage of HTTP/2 or HTTP/3 as they warrant the usage of security TLS versions/algorithms.</p> <ul> <li>Directly turn off other older protocols to avoid protocol downgrade attacks.</li> <li>Do not offer HTTP. Disable both HTTP and SSL compression.</li> <li>Always utilize a secure random number generator (RNG).</li> </ul>"},{"location":"the-top-10/c2-crypto/#instruct-clients-to-enforce-transport-level-encryption","title":"Instruct Clients to enforce Transport Level Encryption","text":"<p>Web servers can instruct web browsers to uphold minimal transport-level security:</p> <ul> <li>Use the Strict-Transport-Security Header to enforce opportunistic encryption and certificate validation checks.</li> <li>Content-Security-Policy allows for automatic client-side upgrade from HTTP to HTTPS.</li> <li>When setting cookies, always utilize the \u201csecure\u201d flag to prevent transmission over HTTP.</li> </ul>"},{"location":"the-top-10/c2-crypto/#support-cryptographic-agility-cryptography-changes-over-time","title":"Support Cryptographic Agility: Cryptography changes over Time","text":"<p>Cryptographic recommendations change over time. To allow for this, make cryptographic choices such as used algorithms or key sizes configurable. This is called Cryptographic Agility</p> <p>If the application needs to support high availability, design key-rollover procedures.</p>"},{"location":"the-top-10/c2-crypto/#vulnerabilities-prevented","title":"Vulnerabilities Prevented","text":"<ul> <li>https://owasp.org/Top10/A02_2021-Cryptographic_Failures/</li> <li>https://mas.owasp.org/MASVS/controls/MASVS-CRYPTO-1/</li> </ul>"},{"location":"the-top-10/c2-crypto/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Transport Layer Protection</li> <li>Ivan Ristic: SSL/TLS Deployment Best Practices</li> <li>OWASP Cheat Sheet: HSTS</li> <li>OWASP Cheat Sheet: Cryptographic Storage</li> <li>OWASP Cheat Sheet: Password Storage</li> <li>OWASP Web Security Testing Guide: Testing for Weak Cryptography</li> <li>OWASP WrongSecrets : vulnerable application with example of how to NOT use secrets</li> </ul>"},{"location":"the-top-10/c2-crypto/#tools","title":"Tools","text":"<ul> <li>https://github.com/nabla-c0d3/sslyze</li> <li>https://testssl.sh/</li> <li>SSLyze - SSL configuration scanning library and CLI tool</li> <li>SSLLabs - Free service for scanning and checking TLS/SSL configuration</li> <li>OWASP O-Saft TLS Tool - TLS connection testing tool</li> <li>GitRob - Command line tool to find sensitive information in publicly available files on GitHub</li> <li>TruffleHog - Searches for secrets accidentally committed</li> <li>Hashicorp Vault - Secrets manager</li> <li>Amazon KMS - Manage keys on AWS</li> <li>AWS Secrets Manager - Manage secrets on AWS</li> <li>Azure Key Vault - Manage keys and secrets on Azure</li> <li>Google Cloud KMS - Manage keys on Google Cloud Platform</li> <li>Google Secret Manager - Manage secrets on Google Cloud Platform</li> </ul>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/","title":"C3: Validate all Input &amp; Handle Exceptions","text":""},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#description","title":"Description","text":"<p>Input validation is a programming technique that ensures only properly formatted data may enter a software system component. When the injection attack targets a client (for example JavaScript based attacks), web servers can perform quoting/encoding on the attacker-provided data before forwarding it to the client.</p> <p>Injection attacks commonly occur if an application confuses data input as executable commands and are often possible where input validation is forgotten or implemented wrong. For example, imagine that a web application accepts an email address as input from a user. The email address would be the expected \u201cdata\u201d. Attackers now search for ways to confuse applications to execute this (supposed) data as commands. Different injection attacks target different areas:</p> <ul> <li>When an attacker tricks an application into interpreting user input (data) as SQL commands (or parts thereof), there is a SQL injection attack. The injected command executes within the database server.</li> <li>Remote command injection (RCE) happens if an application confuses user data with commands that execute on the web application server/host. Server-Side Template Injections are another example of injections executed within the application server.</li> <li>When Javascript-Injections happen, a web application has accepted user data but is coerced to execute that data as code. Injected javascript code is typically executed within another user\u2019s web browser, thus not directly attacking the web server but other users.</li> </ul>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#syntactic-and-semantic-validity","title":"Syntactic and Semantic Validity","text":"<p>An application should check that data is syntactically and semantically valid (in that order) before using it in any way (including displaying it back to the user).</p> <ul> <li> <p>Syntactic validity means that the data is in the expected form. For example, an application may allow users to select a four-digit \u201caccount ID\u201d to perform some operation. The application should assume the user is entering a SQL injection payload and check that the data entered by the user is precisely four digits in length and consists only of numbers (in addition to utilizing proper query parameterization).</p> </li> <li> <p>Semantic validity includes only accepting input within an acceptable range for application functionality and context. For example, a start date must be before an end date when choosing date ranges.</p> </li> </ul>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#threats","title":"Threats","text":"<ul> <li>An attacker could exploit SQL injection vulnerabilities by submitting malicious input to manipulate database queries, potentially gaining unauthorized access to sensitive data.</li> <li>An attacker could perform cross-site scripting (XSS) attacks by injecting malicious scripts into web pages, which are then executed in other users' browsers, potentially stealing session tokens or personal information.</li> <li>An attacker could execute arbitrary code remotely by injecting malicious commands into system calls or APIs, potentially taking control of the target system.</li> <li>An attacker could trigger buffer overflow errors by supplying input exceeding expected lengths, potentially overwriting memory and executing arbitrary code.</li> <li>An attacker could launch denial of service attacks by overwhelming systems with malformed or excessive input, potentially rendering services unavailable to legitimate users.</li> <li>An attacker could access unauthorized files and directories through path traversal attacks, potentially exposing sensitive system files or configuration data.</li> <li>An attacker could insert malicious payloads into XML documents to exploit XML parsing vulnerabilities, potentially leading to information disclosure or system compromise.</li> <li>An attacker could inject malicious templates into server-side template engines, potentially achieving remote code execution on the server.</li> <li>An attacker could confuse applications and bypass security controls through HTTP parameter pollution attacks, potentially manipulating application logic or accessing restricted functionality.</li> </ul>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#implementation","title":"Implementation","text":"<p>Protection against Injection Attacks is typically based upon a defense-in-depth approach and incorporates input filtering, output escaping, and utilization of hardening mechanisms. The former two are only dependent upon implemented security measures, and the latter is mostly dependent upon client-support, e.g., when protecting against XSS, filtering XSS from input and escaping output data server-side would prevent XSS regardless of the used web browser; adding a Content-Security-Policy prevents XSS, but only if the user\u2019s browser supports it. Due to this, security must never depend upon optional hardening measures alone.</p>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#prevent-malicious-data-from-entering-the-system","title":"Prevent malicious data from entering the system","text":"<p>Never trust provided data! Screen all data for malicious patterns or, even better, check all data against an allow list.</p>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#allowlisting-vs-denylisting","title":"Allowlisting vs Denylisting","text":"<p>There are two general approaches to performing syntactic validation, commonly known as allow and deny lists:</p> <ul> <li>Denylisting or denylist validation attempts to check that given data does not contain \u201cknown bad\u201d content. For example, a web application may block input containing the exact text &lt;SCRIPT&gt; to help prevent XSS. However, this defense could be evaded with a lowercase script tag or a script tag of mixed case.</li> <li>Allowlisting or allowlist validation attempts to check that a given data matches a set of \u201cknown good\u201d rules. For example, a allowlist validation rule for a US state would be a 2-letter code that is only one of the valid US states. Allowlisting is the recommended minimal approach. Denylisting is prone to error, can be bypassed with various evasion techniques, and can be dangerous when dependent on itself. Even though denylisting is often evaded, it can be useful to help detect obvious attacks. So while allowlisting helps limit the attack surface by ensuring data is of the right syntactic and semantic validity, denylisting helps detect and potentially stop obvious attacks.</li> </ul>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#client-side-and-server-side-validation","title":"Client side and Server side Validation","text":"<p>Always perform Input validation on the server side for security. While client-side validation is useful for both functional and security purposes, it is easily bypassed. Therefore, client-side validation is performed for usability purposes, but the application\u2019s security must not depend upon it. For example, JavaScript validation may alert the user that a particular field must consist of numbers. Still, the server-side application must validate that the submitted data only consists of numbers in the appropriate numerical range for that feature. Another benefit of using both client AND server-side validation is that any server-side validation warnings can be logged to inform operations of a potential hacker as the client-side validation had been bypassed.</p>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#regular-expressions","title":"Regular Expressions","text":"<p>Regular expressions offer a way to check whether data matches a specific pattern. Let\u2019s start with a basic example. The following regular expression defines an allowlist rule to validate usernames.</p> <pre><code>^\\[a-z0-9_\\]{3,16}$\n</code></pre> <p>This regular expression allows only lowercase letters, numbers, and the underscore character. The username is also restricted to a length of 3 and 16 characters.</p> <p>Caution: Potential for Denial of Service</p> <p>Care should be exercised when creating regular expressions. Poorly designed expressions may result in potential denial of service conditions (aka ReDoS ). Various tools can be tested to verify that regular expressions are not vulnerable to ReDoS.</p> <p>Caution: Complexity</p> <p>Regular expressions are just one way to accomplish validation. Regular expressions can be difficult to maintain or understand for some developers. Other validation alternatives involve writing validation methods programmatically, which can be easier to maintain for some developers.</p>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#unexpected-user-input-mass-assignment","title":"Unexpected User Input (Mass Assignment)","text":"<p>Some frameworks support automatic binding of HTTP requests parameters to server-side objects used by the application. This auto-binding feature can allow an attacker to update server-side objects that were not meant to be modified. The attacker can possibly modify their access control level or circumvent the intended business logic of the application with this feature. This attack has a number of names including: mass assignment, autobinding and object injection. As a simple example, if the user object has a field privilege which specifies the user\u2019s privilege level in the application, a malicious user can look for pages where user data is modified and add privilege=admin to the HTTP parameters sent. If auto-binding is enabled in an insecure fashion, the server-side object representing the user will be modified accordingly.</p> <p>Two approaches can be used to handle this:</p> <ul> <li>Avoid binding input directly and use Data Transfer Objects (DTOs) instead.</li> <li>Enable auto-binding but set up allowlist rules for each page or feature to define which fields are allowed to be auto-bound.</li> </ul> <p>More examples are available in the OWASP Mass Assignment Cheat Sheet</p>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#limits-of-input-validation","title":"Limits of Input Validation","text":"<p>Input validation does not always make data \u201csafe\u201d since certain complex input forms may be \u201cvalid\u201d but still dangerous. For example, a valid email address may contain a SQL injection attack, or a valid URL may contain a Cross Site Scripting attack. Additional defenses besides input validation should always be applied to data, such as query parameterization or escaping.</p>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#use-mechanisms-that-uphold-the-separation-of-data-and-commands","title":"Use mechanisms that uphold the separation of data and commands","text":"<p>Even if malicious data has passed the input checking, applications can prevent injection attacks by never executing those malicious data as commands/code. Multiple measures can achieve this goal, most of them are technology-dependent. For Example:</p> <ul> <li>When using relational databases through SQL, utilize Prepared-Statements. SQL Injection attacks typically happen if an attacker can provide input data that \u201cescapes\u201d from SQL-Commands created through string concatenation. Using Prepared Statements allows the computer to automatically encode input data in a way that does not allow it to \u201cescape\u201d from the command template.</li> <li>When using an ORM, be sure that you know how objects are mapped to SQL commands. While their layer of indirection might prevent common SQLi, specially prepared attacks are often still feasible.</li> <li>Server-Side Template Injection (SSTI) uses a templating engine on the server-side to dynamically generate content that is then displayed to the user. SSTI engines often allow configuration of sandboxing, i.e., only allow execution of a limited amount of methods.</li> <li>Executing System Commands with user input as parameters is prone to injection attacks. If feasible, this should be avoided.</li> </ul>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#javascript-injection-attacks","title":"JavaScript Injection Attacks","text":"<p>A special case are JavaScript based Injection attacks (XSS). The injected malicious code is commonly executed within a victim\u2019s browser. Typically, attackers try to steal the user\u2019s session information from the browser and not directly execute commands (as they do on the server-side). In addition to server-side input filtering and output escaping, multiple client-side hardening measurements can be taken (these also protect against the special case of DOM-based XSS where no server-side logic is involved and thus cannot filter malicious code):</p> <ul> <li>Mark sensitive cookies with httpOnly so JavaScript cannot access them</li> <li>Utilize a Content-Security-Policy to reduce the attack-surface for JavaScript-based Attacks</li> <li>Use a secure by default framework like Angular</li> </ul>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#validating-and-sanitizing-html","title":"Validating and Sanitizing HTML","text":"<p>Consider an application that needs to accept HTML from users (via a WYSIWYG editor that represents content as HTML or features that directly accept HTML in input). In this situation, validation or escaping will not help.</p> <ul> <li>Regular expressions are not expressive enough to understand the complexity of HTML5.</li> <li>Encoding or escaping HTML will not help since it will cause the HTML not to render properly.</li> </ul> <p>Therefore, you need a library to parse and clean HTML formatted text. Please see the XSS Prevention Cheat Sheet on HTML Sanitization for more information on HTML Sanitization.</p>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#special-case-validate-data-during-deserialization","title":"Special Case: Validate Data During Deserialization","text":"<p>Some forms of input are so complex that validation can only minimally protect the application. For example, it\u2019s dangerous to deserialize untrusted data or data that can be manipulated by an attacker. The only safe architectural pattern is to not accept serialized objects from untrusted sources or to only deserialize in limited capacity for only simple data types. You should avoid processing serialized data formats and use easier to defend formats such as JSON when possible.</p> <p>If that is not possible then consider a series of validation defenses when processing serialized data.</p> <ul> <li>Implement integrity checks and encryption of the serialized objects to prevent hostile object creation or data tampering.</li> <li>Enforce strict type constraints during deserialization before object creation; typically code is expecting a definable set of classes. Bypasses to this technique have been demonstrated.</li> <li>Isolate code that deserializes, such that it runs in very low privilege environments, such as temporary containers.</li> <li>Log security deserialization exceptions and failures, such as where the incoming type is not the expected type, or the deserialization throws exceptions.</li> <li>Restrict or monitor incoming and outgoing network connectivity from containers or servers that deserialize.</li> <li>Monitor deserialization, alerting if a user deserializes constantly.</li> </ul>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#vulnerabilities-prevented","title":"Vulnerabilities Prevented","text":"<ul> <li>Input validation reduces the attack surface of applications and can sometimes make attacks more difficult against an application.</li> <li>Input validation is a technique that provides security to certain forms of data, specific to certain attacks and cannot be reliably applied as a general security rule.</li> <li>Input validation should not be used as the primary method of preventing XSS, SQL Injection and other attacks.</li> <li>2023 CWE Top 25 - 3 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</li> <li>2023 CWE Top 25 - 5 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</li> <li>2023 CWE Top 25 - 16 Improper Neutralization of Special Elements used in a Command ('Command Injection')</li> <li>2023 CWE Top 25 - 23 Improper Control of Generation of Code ('Code Injection')</li> </ul>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#references","title":"References","text":"<p>Regarding Input Validation:</p> <ul> <li>OWASP Cheat Sheet: Input Validation</li> <li>OWASP Testing Guide: Testing for Input Validation</li> <li>Injection Prevention Cheat Sheet</li> <li>Injection Prevention Cheat Sheet in Java</li> <li>Hardening with CSP: CSP with Google</li> <li>Deploying CSP in Single Page Applications</li> </ul>"},{"location":"the-top-10/c3-validate-input-and-handle-exceptions/#tools","title":"Tools","text":"<p>Helping with Input Validation:</p> <ul> <li>OWASP Java HTML Sanitizer Project</li> <li>Java JSR-303/JSR-349 Bean Validation</li> <li>Java Hibernate ValidatorApache Commons ValidatorPHP\u2019s filter functions</li> </ul> <p>Testing for Injection Attacks:</p> <ul> <li>Sqlmap.py</li> <li>ZAP-based scans</li> </ul> <p>Helping with Hardening:</p> <ul> <li>CSP Evaluator</li> </ul>"},{"location":"the-top-10/c4-secure-architecture/","title":"C4: Address Security from the Start","text":""},{"location":"the-top-10/c4-secure-architecture/#description","title":"Description","text":"<p>When designing a new application, creating a secure architecture prevents vulnerabilities before they even become part of the application. This prevents costly repairs and repudiation problems.</p> <p>There are design principles that lead to secure architectures:</p> <ul> <li>keep it simple, stupid (KISS): the easier an application is to understand, the easier it is to reason about its components and their interactions. This allows to reason about the application's security behavior.</li> <li>Make it easy to do the right thing: don't expect the user to read documentation or invest time to \"do things the right way\". By default the application should behave in a secure manner. To make it insecure, an explicit action by the user has to take place.</li> <li>don't rely on obscurity: if the only security is due to the intransparency of the application or its source code, the application is not secure at all.</li> <li>Identify and minimize your exposed components (\"attack surface\"): attackers cannot attack what's not there.</li> <li>Design for Defense-in-Depth: think about what happens, if a component is breached and about the potential blast radius of an attack.</li> </ul>"},{"location":"the-top-10/c4-secure-architecture/#threats","title":"Threats","text":"<ul> <li>If the application is only protected by security-by-obscurity, an attacker that reverse-engineers the application has full permissions as soon the obfuscation is cleared-up. In addition, an attacker is able to monitor network traffic: while the obfuscation might be performed on the code-level, the operations on the network level can easily be analyzed.</li> <li>A web-application with a complex authorization scheme is deployed. A new software developer is tasked with extending one of the components. Due to the complexity, they misconfigure the authorization scheme and an attacker is able to exploit IDOR.</li> <li>A web-application with a complex authorization scheme is deployed. A new software developer adds a new plugin to the system. The system makes it hard to do the right thing, and all security configuration must be manually added to the plugin, by-default no security measures are taken. The new developer is not configuring anything thus the new plugin introduces an IDOR into the system.</li> <li>A web-application has many components, all of which are exposed to the public internet. The resulting attack surface is massive. For example, a database management tool (e.g., <code>phpmyadmin</code>) is deployed. After a 0day was found in <code>mysqladmin</code>, the whole database was extracted. During normal use, nobody uses <code>phpmyadmin</code>.</li> </ul>"},{"location":"the-top-10/c4-secure-architecture/#implementation","title":"Implementation","text":"<p>The mantra \"Complexity is the enemy of security\" can be seen throughout this implementation guidance.</p>"},{"location":"the-top-10/c4-secure-architecture/#design-for-clarity-and-transparency","title":"Design for Clarity and Transparency","text":"<p>Architecture should focus upon simplicity: the designed software should be only as complex as the intended user's requirements warrant. Focusing upon simplicity brings multiple benefits for the created software:</p> <ul> <li>It is easier to reason about a simple system. This allows to reason about potential security impacts of changes.</li> <li>Long-term maintenance is aided through the simpler design.</li> <li>The design should focus upon transparency, i.e., the security should not depend upon security-by-obscurity.</li> </ul>"},{"location":"the-top-10/c4-secure-architecture/#make-it-easy-to-do-the-right-thing","title":"Make it easy to do the right thing","text":"<p>Two terms often heard are \"security by design\" and \"security by default\". The former implies, that the software system should be usable in a secure manner while the latter means that the initial configuration of the software system is secure.</p> <p>This implies, that an system administrator has to make an explicit choice to introduce insecure configuration into the system. In contrast, the path of least resistance should always result in a secure system.</p> <p>When focusing upon end-user interactions, this aspect is important for designing user interfaces and flows. When focusing upon developer interactions, developer-facing facilities such as framework, APIs, network APIs should be designed that when using them with default values, only secure operations should occur. Think about this when designing your configuration files too</p>"},{"location":"the-top-10/c4-secure-architecture/#clearly-articulate-whats-trusted-to-do-what-and-ensure-those-relationships-are-enforced","title":"Clearly articulate what's trusted to do what, and ensure those relationships are enforced","text":"<p>Clearly articulate what's trusted to do what, and ensure those relationships are enforced, e.g., trust boundaries delineate blast radius and are enforced by controls, such as firewalls or gateways.</p> <p>Attenuate what's allowed by careful validation at each step. Go deeper with threat modeling mnemonics like stride or methodologies like stride per element.</p>"},{"location":"the-top-10/c4-secure-architecture/#identify-and-minimize-your-exposed-components-attack-surface","title":"Identify and minimize your exposed components (\"attack surface\")","text":"<p>Identify all areas that an attacker can access, review them and try to minimize them: attackers cannot attack what's not there.</p> <p>In addition, exposing only a minimal set of operations makes long-term maintenance easier.</p>"},{"location":"the-top-10/c4-secure-architecture/#use-well-known-architecture-patterns","title":"Use well-known Architecture Patterns","text":"<p>Experts have shared their wisdom about best practices in an easily digestible format called secure architecture patterns. Architecture patterns are reusable and can be applied across multiple applications.</p> <p>For a solution to be considered a pattern, it must have these characteristics:</p> <ul> <li>First, a secure architecture pattern must solve a security problem.</li> <li>Second, a secure architecture pattern must not be tied to a specific vendor or technology.</li> <li>Third, a secure architecture pattern must demonstrate how it mitigates threats.</li> <li>Fourth, a secure architecture pattern must use standardized terms for threats and controls for easy reuse.<sup>^footnote-1</sup></li> </ul> <p>An architecture pattern is a way to solve a problem using a standard solution versus creating a custom solution. A secure architecture pattern is a standard solution that has been reviewed and hardened against known security threats.</p> <p>Implementation:</p> <ol> <li>Identify the problem that requires solving.</li> <li>Consider the catalog of available secure architecture patterns.</li> <li>Choose a secure architecture pattern for the design.</li> <li>Implement the secure architecture pattern.</li> </ol>"},{"location":"the-top-10/c4-secure-architecture/#vulnerabilities-prevented","title":"Vulnerabilities Prevented","text":"<ul> <li>Business Logic Flaws: These patterns can help in structuring the application to avoid complex and often overlooked business logic vulnerabilities.</li> <li>OWASP Top 10 2021-A04 (Insecure Design): Secure architecture patterns directly target the mitigation of risks associated with insecure design, a key concern highlighted by OWASP.</li> </ul>"},{"location":"the-top-10/c4-secure-architecture/#references","title":"References","text":"<ul> <li>https://securitypatterns.io/what-is-a-security-pattern/</li> <li>https://owasp.org/www-pdf-archive/Vanhilst_owasp_140319.pdf</li> <li>https://cheatsheetseries.owasp.org/cheatsheets/Microservices_based_Security_Arch_Doc_Cheat_Sheet.html</li> <li>https://cheatsheetseries.owasp.org/cheatsheets/Secure_Product_Design_Cheat_Sheet.html</li> </ul>"},{"location":"the-top-10/c4-secure-architecture/#tools","title":"Tools","text":"<ul> <li>maybe add some threat modeling tools here?</li> </ul>"},{"location":"the-top-10/c5-secure-by-default/","title":"C5: Secure By Default Configurations","text":""},{"location":"the-top-10/c5-secure-by-default/#description","title":"Description","text":"<p>\u201cSecure-by-Default\u201d means products are resilient against prevalent exploitation techniques out of the box without additional charge.<sup><sup>[2]</sup></sup> The benefit of having an application secure from the start is that it removes the burden away from developers on how to lock a system down, providing them with an already secure product. It reduces the effort required to deploy products in a secure manner and gives greater confidence that they will remain secure over time.</p>"},{"location":"the-top-10/c5-secure-by-default/#threats","title":"Threats","text":"<ul> <li>An attacker could gain unauthorized access by exploiting default, weak, or well-known credentials that haven't been changed from their out-of-the-box state.</li> <li>An attacker could take advantage of overly permissive default settings to access sensitive resources or perform unauthorized actions.</li> <li>An attacker could gather sensitive information by probing unnecessarily enabled features or services that are active by default.</li> <li>An attacker could conduct cross-site scripting (XSS) attacks by exploiting lenient default security headers that don't provide adequate protection against such threats.</li> </ul>"},{"location":"the-top-10/c5-secure-by-default/#implementation","title":"Implementation","text":"<p>In modern cloud applications, when developers build applications, they are also building the infrastructure for their applications, making infrastructure decisions, including security-critical configurations, while writing their code. These are deployed on infrastructure created and configured via code, Infrastructure-as-code (IaC), using configurations applied at the application level ( including web server and database), at container, Function as a Service, or infrastructure level. For example, in the case of web applications, folder permissions need to follow the principle of least privilege to limit resource access rights. When web and mobile applications are deployed in production, the debugging should be disabled.</p> <p>Is it important that when developers put together their infrastructure components, they:</p> <ol> <li>Implement configurations based on the Least privilege principle - for example: ensure that your cloud storage (S3 or other) is configured to be private and accessed by the minimum amount of time</li> <li>Access is denied by default and allowed via an allowed list</li> <li>Use container images that have been scanned for package and component vulnerabilities and pulled from a private container registry</li> <li>Prefer declarative infrastructure configuration over manual configuration activities. On a low-level, utilize Infrastructure-as-Code templates for automated provisioning and configuration of your cloud and on-premises infrastructure. On a high-level utilize Policy-as-Code to enforce policies including privilege assignments. Using a declarative format allows those policies to be managed similar to source code: checked-in into a source code management system, versioned, access-controlled, subject to change management, etc.</li> <li>Traffic encryption - by default or do not implement unencrypted communication channels in the first place</li> </ol>"},{"location":"the-top-10/c5-secure-by-default/#continuous-configurations-verification","title":"Continuous Configurations Verification","text":"<p>As part of software development, a developer needs to ensure that software is configured securely by default at the application level. For example,</p> <ul> <li>The code which defines the infrastructure should follow the principle of least privilege.</li> <li>Configurations and features that aren\u2019t required such as accounts, software, and demo capabilities should be disabled.</li> </ul>"},{"location":"the-top-10/c5-secure-by-default/#vulnerabilities-prevented","title":"Vulnerabilities Prevented","text":"<ul> <li>OWASP Top 10 2021 A05 \u2013 Security Misconfiguration</li> </ul>"},{"location":"the-top-10/c5-secure-by-default/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Infrastructure as Code Security Cheatsheet</li> <li>OWASP ASVS: Application Security Verification Standard V14 Configuration</li> <li>Cloud security guidance - NCSC.GOV.UK</li> </ul>"},{"location":"the-top-10/c5-secure-by-default/#tools","title":"Tools","text":"<ul> <li>Tfsec - open source static analysis for your Terraform templates</li> <li>Terrascan - scan for Infrastructure-as-Code vulnerabilities</li> <li>Checkov - Scan for open-source and Infrastructure-as-Code vulnerabilities</li> <li>Scout Suite is an open source multi-cloud security-auditing tool which currently supports: Amazon Web Services, Microsoft Azure, Google Cloud Platform</li> <li>prowler</li> <li>Cloudmapper</li> <li>Snyk - Scan for open-source, code, container, and Infrastructure-as-Code vulnerabilities</li> <li>Trivy - Scan for open-source, code, container, and Infrastructure-as-Code vulnerabilities</li> <li>KICS - Scan for Infrastructure-as-Code vulnerabilities</li> <li>Kubescape - Scan for Kubernetes vulnerabilities</li> <li>Kyverno - Securing Kubernetes using Policies</li> </ul>"},{"location":"the-top-10/c6-use-secure-dependencies/","title":"C6: Keep your Components Secure","text":""},{"location":"the-top-10/c6-use-secure-dependencies/#description","title":"Description","text":"<p>It is a common practice in software development to leverage libraries and frameworks. Secure libraries and software frameworks with embedded security help software developers prevent security-related design and implementation flaws. A developer writing an application from scratch might not have sufficient knowledge, time, or budget to properly implement or maintain security features. Leveraging security frameworks (both open source and vendor) help accomplish security goals more efficiently and accurately.</p> <p>When possible, the emphasis should be on using the existing secure features of frameworks rather than importing yet another third party libraries, which requires regular updates and maintenance. It is preferable to have developers take advantage of what they're already using instead of forcing yet another library on them.</p> <p>When incorporating third party libraries or frameworks into your software, it is important to consider the following two categories of best practices:</p> <ol> <li>Identify trusted libraries and frameworks to bring into your software.</li> <li>Monitor and update packages to ensure that your software is not vulnerable to the possible security vulnerabilities introduced by the third party components.</li> </ol>"},{"location":"the-top-10/c6-use-secure-dependencies/#threats","title":"Threats","text":"<ul> <li>An attacker could exploit known vulnerabilities in outdated third-party components to gain unauthorized access or execute malicious code.</li> <li>An attacker could conduct supply chain attacks by compromising libraries or frameworks used in the development process, potentially inserting malicious code into the final product.</li> <li>An attacker could extract sensitive information by exploiting insecure configurations in third-party components that haven't been properly hardened.</li> <li>An attacker could launch denial of service attacks by targeting known vulnerabilities in external libraries, potentially disrupting the availability of services.</li> </ul>"},{"location":"the-top-10/c6-use-secure-dependencies/#implementation","title":"Implementation","text":"<p>Below each of these categories are further detailed to help secure your software.</p>"},{"location":"the-top-10/c6-use-secure-dependencies/#best-practices-to-identify-trusted-libraries","title":"Best Practices to Identify Trusted libraries","text":"<p>Below are listed a few criteria you can use to select the next library or framework for your software. This is not an exhaustive list, but is a good start.</p> <ol> <li> <p>Sources: Download recommended security libraries from official sources over secure links and prefer signed packages to reduce the chance of including a modified, malicious component (See A08:2021-Software and Data Integrity Failures).</p> </li> <li> <p>Popularity: Leverage libraries and frameworks used by many applications which have around large communities. Consider data points such as the number of GitHub stars a package\u2019s source code repository has received, and number of downloads from within a package manager.</p> </li> <li> <p>Activity: Ensure that the library/ framework is actively maintained and issues are resolved in a timely fashion.</p> </li> <li> <p>Maturity: Use stable versions . Projects in early stages of development area higher risk to your software .</p> </li> <li> <p>Complexity: A large, complex library with lots of dependencies, is more difficult to incorporate into your software. Also, a high number of dependencies indicates a higher number of future upgrades to ensure all those dependencies are up-to-date and secured.</p> </li> <li> <p>Security: If the package is open source, you can use static application security testing (SAST) or Software Composition Analysis (SCA) to help identify malicious code or security weaknesses, before first including them.</p> </li> </ol>"},{"location":"the-top-10/c6-use-secure-dependencies/#best-practices-to-keep-them-secure","title":"Best Practices to Keep them Secure","text":"<p>New security vulnerabilities are disclosed every day and are published in public databases like the NIST National Vulnerability Database (NVD) which identifies publicly known vulnerabilities using Common Vulnerabilities and Exposures (CVE). Furthermore, exploits made available in public databases allow attackers to automate their attacks. As a result of this, it is important to ensure on a regular basis that your software is free of well-known security vulnerabilities.</p> <ol> <li> <p>Maintain an inventory catalog of all the third party components. It is recommended to automatically create SBOMs (Software-Bill-Of-Materials) from within the build pipeline. A SBOM contains all used third-party dependencies and their versions and can be automatically monitored by a variety of supply chain management tools.</p> </li> <li> <p>Perform continuous checks. Use your SBOMs together with periodic or continuous monitoring tools such as OWASP dependency-track to automatically detect well-known publicly disclosed vulnerabilities.</p> </li> <li> <p>Verify for security early and often - integrate SCA tools in early stages of software development, to gain visibility in the number and criticality of security vulnerabilities of the software and its dependencies from every stage of the software development lifecycle.</p> </li> <li> <p>Proactively update libraries and components. Updating software must be a recurring task that occurs throughout the lifecycle of the application or product, from ideation to retirement.</p> </li> </ol>"},{"location":"the-top-10/c6-use-secure-dependencies/#vulnerabilities-prevented","title":"Vulnerabilities Prevented","text":"<p>Secure frameworks and libraries can help to prevent a wide range of web application vulnerabilities. It is critical to keep these frameworks and libraries up to date as described in using vulnerable and outdated components with known vulnerabilities Top 10 2021.</p>"},{"location":"the-top-10/c6-use-secure-dependencies/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Third Party Javascript Management</li> <li>OpenSSF Scorecard - Security health metrics for Open Source</li> </ul>"},{"location":"the-top-10/c6-use-secure-dependencies/#tools","title":"Tools","text":"<ul> <li>OWASP Dependency-Check \u00ad- to identify project dependencies and check for publicly disclosed vulnerabilities</li> <li>OWASP Dependency-Track - periodically monitor SBOM files for new vulnerabilities</li> <li>Retire.JS scanner for JavaScript libraries</li> <li>Renovate for automated dependencies updates</li> <li>Harbor : an open source registry that secures artifacts with policies and role-based access control</li> </ul>"},{"location":"the-top-10/c7-implement-digital-identity/","title":"C7: Implement Digital Identity","text":""},{"location":"the-top-10/c7-implement-digital-identity/#description","title":"Description","text":"<p>Digital Identity is a unique representation of an individual, organization (or another subject) as they engage in an online transaction. Authentication is the process of verifying that an individual or entity is who they claim to be.</p> <p>Session management is the process by which a server maintains the state of the user\u2019s authentication so that the user may continue to use the system without re-authenticating. Digital identity, authentication, and session management are very complex topics. We're scratching the surface of the topic of Digital Identity here. Ensure that your most capable engineering talent is responsible for maintaining the complexity involved with most Identity solutions. The NIST Special Publication 800-63B: Digital Identity Guidelines (Authentication and Lifecycle Management provide solid guidance on implementing digital identity, authentication, and session management controls. Below are some recommendations for secure implementation to ensure strong digital identity controls are implemented in applications.</p>"},{"location":"the-top-10/c7-implement-digital-identity/#authentication-assurance-levels","title":"Authentication Assurance Levels","text":"<p>NIST 800-63b describes three levels of authentication assurance called Authentication Assurance Level (AAL):</p> <ul> <li>Level 1 : Passwords: The first level, AAL level 1 is reserved for lower-risk applications that do not contain PII or other private data. At AAL level 1 only single-factor authentication is required, typically through the use of a password (something you know). The security of passwords (or credentials in general) is of utmost importance, this includes both secure storage (using a key-derivation function and such) as well as corresponding processes, e.g. having a secure password-reset flow.</li> <li>Level 2 : Multi-Factor Authentication: NIST 800-63b AAL level 2 is reserved for higher-risk applications that contain \"self-asserted PII or other personal information made available online.\" At AAL level 2 multi-factor authentication is required including OTP or other forms of multi-factor implementation.</li> <li>Level 3 : Cryptographic Based Authentication: NIST 800-63b Authentication Assurance Level 3 (AAL3) is required when the impact of compromised systems could lead to personal harm, significant financial loss, harm the public interest or involve civil or criminal violations. AAL3 requires authentication that is \"based on proof of possession of a key through a cryptographic protocol.\" This type of authentication is used to achieve the strongest level of authentication assurance. This is typically done through hardware cryptographic modules. When developing web applications, this will commonly lead to WebAuthn or PassKeys.</li> </ul>"},{"location":"the-top-10/c7-implement-digital-identity/#level-2-multi-factor-authentication","title":"Level 2 : Multi-Factor Authentication","text":"<p>NIST 800-63b AAL level 2 is reserved for higher-risk applications that contain \"self-asserted PII or other personal information made available online.\" At AAL level 2 multi-factor authentication is required including OTP or other forms of multi-factor implementation. Multi-factor authentication (MFA) ensures that users are who they claim to be by requiring them to identify themselves with a combination of:</p> <ul> <li>Something you know \u2013 password or PIN</li> <li>Something you own \u2013 token or phone, when using a phone please use a standard authenticator application heeding standardized protocols such as FIDO2.</li> <li>Something you are \u2013 biometrics, such as a fingerprint Using passwords as a sole factor provides weak security. Multi-factor solutions provide a more robust solution by requiring an attacker to acquire more than one element to authenticate with the service. It is worth noting that biometrics, when employed as a single factor of authentication, are not considered acceptable secrets for digital authentication. They can be obtained online or by taking a picture of someone with a camera phone (e.g., facial images) with or without their knowledge, lifted from objects someone touches (e.g., latent fingerprints), or captured with high-resolution images (e.g., iris patterns). Biometrics must be used only as part of multi-factor authentication with a physical authenticator (something you own). For example, accessing a multi-factor one-time password (OTP) device will generate a one-time password that the user manually enters for the verifier.</li> </ul>"},{"location":"the-top-10/c7-implement-digital-identity/#level-3-cryptographic-based-authentication","title":"Level 3 : Cryptographic Based Authentication","text":"<p>NIST 800-63b Authentication Assurance Level 3 (AAL3) is required when the impact of compromised systems could lead to personal harm, significant financial loss, harm the public interest or involve civil or criminal violations. AAL3 requires authentication that is \"based on proof of possession of a key through a cryptographic protocol.\" This type of authentication is used to achieve the strongest level of authentication assurance. This is typically done through hardware cryptographic modules. When developing web applications, this will commonly lead to WebAuthn or PassKeys.</p>"},{"location":"the-top-10/c7-implement-digital-identity/#session-management-client-vs-server-side-sessions","title":"Session Management: client- vs server-side sessions","text":"<p>HTTP on its own is a session-less protocol: no data is shared between requests. When you look at how we are using the web, this is clearly not what is user-visible as for example you log into a website and stay logged in during subsequent requests. This is possible as session-management has been implemented on top of HTTP. Once the initial successful user authentication has taken place, an application may choose to track and maintain this authentication state for a limited amount of time. This will allow the user to continue using the application without having to keep re-authentication with each request. Tracking of this user state is called Session Management. Session-Management can be roughly categorized in client- and server-side session management. In the former, all session data is stored within the client and transmitted on each request to the server. The latter stores session-specific data on the server, e.g., in a database, and only transmits an identifier to the client. The client then submits only the session-identifier on each request and the server retrieves the session-data from the server-side storage.</p> <p>From a security-perspective server-side sessions have multiple benefits:</p> <ul> <li>Data is not directly stored on the client: this can be problematic, e.g., when handling sensitive data. In addition, client-side session-management solutions must ensure that client-side data has not been tampered with.</li> <li>Less data is transmitted between client and server (which is not as relevant as network bandwidth has increased)</li> <li>Server-side session-management allows for session-invalidation, e.g., a user can logout all of their sessions By default, always use server-side session management..</li> </ul>"},{"location":"the-top-10/c7-implement-digital-identity/#threats","title":"Threats","text":"<ul> <li>An attacker could hijack user sessions by stealing or predicting session tokens, potentially gaining unauthorized access to authenticated user accounts.</li> <li>An attacker could execute session fixation attacks by exploiting weak session management, forcing a user to use a known session identifier.</li> <li>An attacker could perform cross-site request forgery (CSRF) attacks on authenticated sessions, tricking users into unknowingly executing unwanted actions on a web application.</li> </ul>"},{"location":"the-top-10/c7-implement-digital-identity/#implementation","title":"Implementation","text":""},{"location":"the-top-10/c7-implement-digital-identity/#when-using-passwords","title":"When using Passwords","text":""},{"location":"the-top-10/c7-implement-digital-identity/#password-requirements","title":"Password Requirements","text":"<p>Passwords should comply with the following requirements at the very least:</p> <ul> <li>be at least 8 characters in length if multi-factor authentication (MFA) and other controls are also used. If MFA is not possible, this should be increased to at least 10 characters</li> <li>all printing ASCII characters as well as the space character should be acceptable in memorized secrets</li> <li>encourage the use of long passwords and passphrases</li> <li>remove complexity requirements as these have been found to be of limited effectiveness. Instead, the adoption of MFA or longer password lengths is recommended</li> <li>ensure that passwords used are not commonly used passwords that have been already been leaked in a previous compromise. You may choose to block the top 1000 or 10000 most common passwords which meet the above length requirements and are found in compromised password lists. The following link contains the most commonly found passwords: https://github.com/danielmiessler/SecLists/tree/master/Passwords</li> <li>Enforce password rotation, to avoid potential breaches due to the fact the same password is being used for a very long period of time</li> </ul>"},{"location":"the-top-10/c7-implement-digital-identity/#implement-secure-password-recovery-mechanism","title":"Implement Secure Password Recovery Mechanism","text":"<p>It is common for an application to have a mechanism for a user to gain access to their account in the event they forget their password. A good design workflow for a password recovery feature will use multi-factor authentication elements. For example, it may ask a security question - something they know, and then send a generated token to a device - something they own. Please see the Forgot_Password_Cheat_Sheet and Choosing_and_Using_Security_Questions_Cheat_Sheet for further details.</p>"},{"location":"the-top-10/c7-implement-digital-identity/#implement-secure-password-storage","title":"Implement Secure Password Storage","text":"<p>In order to provide strong authentication controls, an application must securely store user credentials. Furthermore, cryptographic controls should be in place such that if a credential (e.g., a password) is compromised, the attacker does not immediately have access to this information. Please see the OWASP Password Storage Cheat Sheet for further details.</p>"},{"location":"the-top-10/c7-implement-digital-identity/#server-side-session-management","title":"Server-Side Session-Management","text":"<p>Typically server-side session management is implemented with HTTP cookies which are used to store a session-identifier. When a new session is requested, the server generates a new session-identifier and transmits it to the client (browser). On each subsequent request, the session-identifier is transmitted from the client to the server, and the server uses this session-identifier to lookup session-data within a server-side database.</p>"},{"location":"the-top-10/c7-implement-digital-identity/#session-generation-and-expiration","title":"Session Generation and Expiration","text":"<p>User state is tracked in a session. This session is typically stored on the server for traditional web based session management. A session identifier is then given to the user so the user can identify which server-side session contains the correct user data. The client only needs to maintain this session identifier, which also keeps sensitive server-side session data off of the client. Here are a few controls to consider when building or implementing session management solutions:</p> <ul> <li>Ensure that the session id is long, unique and random, i.e., is of high entropy.</li> <li>The application should generate a new session during authentication and re-authentication.</li> <li>The application should implement an idle timeout after a period of inactivity and an absolute maximum lifetime for each session, after which users must re-authenticate. The length of the timeouts should be inversely proportional with the value of the data protected.</li> </ul> <p>Please see the Session Management Cheat Sheet further details. ASVS Section 3 covers additional session management requirements.</p>"},{"location":"the-top-10/c7-implement-digital-identity/#client-side-session-management","title":"Client-Side Session-Management","text":"<p>Server-side sessions can be limiting for some forms of authentication. \"Stateless services\" allow for client side management of session data for performance purposes so the server has less of a burden to store user sessions. These \"stateless\" applications typically generate a short-lived access token containing all of the current user\u2019s access permissions which is then included in all subsequent requests. Cryptography must be employed so that the client cannot alter the permissions stored within the token. When a client requests a server operation, the client includes the retrieved access token and the server verifies that the token has not been tampered with and extracts the permissions from the token. These permissions are then used for subsequent permission checks.</p>"},{"location":"the-top-10/c7-implement-digital-identity/#jwt-json-web-tokens","title":"JWT (JSON Web Tokens)","text":"<p>JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted as long as it is digitally signed by a trusted authority. A JWT token is created during authentication and is verified by the server (or servers) before any processing. However, JWTs are often not saved by the server after initial creation. JWTs are typically created and then handed to a client without being saved by the server in any way. The integrity of the token is maintained through the use of digital signatures so a server can later verify that the JWT is still valid and was not tampered with since its creation. This approach is both stateless and portable in the way that client and server technologies can be different yet still interact. Please note, that if you are using JWTs you have to make sure that the returned JWT is actually using one of the signing algorithms that you are using. Otherwise, an attacker could try to create a JWT signed with the NULL algorithm, use a MAC-vs-Signature confusion attack, or provide a custom JWS key for signing. When you are issuing JWTs, make double-sure that you are using a secure private key for signing the JWTs: each output JWT gives an attacker all information needed to perform an offline cracking attack, so you should rotate keys frequently too.</p>"},{"location":"the-top-10/c7-implement-digital-identity/#browser-cookies","title":"Browser Cookies","text":"<p>Browser cookies are a common method for web applications to store session identifiers for web applications implementing standard session management techniques. Here are some defenses to consider when using browser cookies.</p> <ul> <li>When browser cookies are used as the mechanism for tracking the session of an authenticated user, these should be accessible to a minimum set of domains and paths and should be tagged to expire at, or soon after, the session\u2019s validity period.</li> <li>Please be aware that not explicitly stating a domain during cookie setup will use the current origin as domain. This is a sensible default.</li> <li>Please be aware, that while stating a path during cookie setup will limit the browser to only submit the cookie if the request lies within the stated path. This protects the cookie of one application from being accessed by another application within a different path on the same server. This protection is brittle: if the \u201cother\u201d application has an XSS vulnerability and the attacker can introduce iframes, the \u201cpath\u201d protection can be circumvented.</li> <li>The \u2018secure\u2019 flag should be set to ensure the transfer is done via secure channel only (TLS).</li> <li>HttpOnly flag should be set to prevent the cookie from being accessed via JavaScript.</li> <li>Adding \u201csamesite\u201d attributes to cookies prevents some modern browsers from sending cookies with cross-site requests and provides protection against cross-site request forgery and information leakage attacks.</li> </ul>"},{"location":"the-top-10/c7-implement-digital-identity/#vulnerabilities-prevented","title":"Vulnerabilities Prevented","text":"<ul> <li>A07:2021 \u2013 Identification and Authentication Failures</li> <li>OWASP Mobile Top 10 2016-M4- Insecure Authentication</li> </ul>"},{"location":"the-top-10/c7-implement-digital-identity/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Authentication</li> <li>OWASP Cheat Sheet: Password Storage</li> <li>OWASP Cheat Sheet: Forgot Password</li> <li>OWASP Cheat Sheet: Choosing and Using Security Questions</li> <li>OWASP Cheat Sheet: Session Management</li> <li>NIST Special Publication 800-63 Revision 3 - Digital Identity Guidelines</li> </ul>"},{"location":"the-top-10/c7-implement-digital-identity/#tools","title":"Tools","text":"<ul> <li>Daniel Miessler: Most commonly found passwords</li> </ul>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/","title":"C8: Leverage Browser Security Features","text":""},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#description","title":"Description","text":"<p>Browsers are the gateway to the web for most users. As such, it's critical to employ robust security measures to protect the user from various threats. This section outlines the techniques and policies that can be implemented to bolster browser security.</p> <p>While we are currently focusing upon traditional web browsers, please note that there is a diverse world of other client programs out there, ranging from API clients to smart-tvs.</p>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#opportunistic-security-and-browser-support","title":"Opportunistic Security and Browser-Support","text":"<p>Instructing the web browser to enforce security measures is always opportunistic: the web application cannot verify that the browser heeds the guidance given and thus these security measures should always be seen as additional (and optional) Hardening Measures that further complicate an attacker\u2019s life.</p> <p>In addition, web browsers must actually support the security guidance offered by web applications. The level of support differs between different browsers and their versions. Web sites such as https://caniuse.com can be used to check which web browser (versions) support which features. The supported security features can change over time, e.g., the X-XSS-Protection header has been removed from all major browsers; the browsers\u2019 default behavior can change over time as seen with Referrer-Policy; and even the semantics of existing headers can change over time as seen with X-Content-Type-Options.</p> <p>While the changing browser feature set can be problematic, typically newer browser provide more security features. They sometimes even enable them by default. Explicitly setting those security headers can unify the different browsers\u2019 behaviors and thus reduces maintenance effort.</p> <p>A fully compromised browser might not heed security guidance but if an adversary was able to take full control of a browser, they already have far more damaging attack paths than just ignoring security guidance.</p>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#threats","title":"Threats","text":"<ul> <li>An attacker could execute cross-site scripting (XSS) attacks by exploiting inadequate Content Security Policy settings, potentially injecting malicious scripts into web pages.</li> <li>An attacker could perform clickjacking attacks by taking advantage of missing X-Frame-Options headers, potentially tricking users into unintended interactions with disguised web elements.</li> <li>An attacker could gather sensitive information through <code>Referer</code> HTTP headers when proper Referrer-Policy is not set, potentially exposing private data or user activities.</li> <li>An attacker could exploit MIME type confusion vulnerabilities in the absence of X-Content-Type-Options headers, potentially executing malicious scripts disguised as benign file types.</li> <li>An attacker could hijack user sessions by exploiting insecure cookie settings, potentially gaining unauthorized access to user accounts.</li> <li>An attacker could perform DNS rebinding attacks in the absence of proper DNS pinning, potentially bypassing same-origin policy restrictions.</li> <li>An attacker could exploit cross-origin resource sharing (CORS) misconfigurations to gain unauthorized access to resources, potentially compromising data confidentiality and integrity.</li> </ul>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#implementation","title":"Implementation","text":"<p>Typically, there are two (Security Header specific) ways that web applications can use to instruct web browsers about security: HTTP headers and HTML tags.</p> <p>The behavior taken if a security directive is given more than one time is security header specific. For example, a duplicate X-Frame-Options header will disable its protection while a duplicate Content-Security-Policy header will lead to a stricter policy thus tightening its security. The following is a non-exhaustive list of potential Hardening mechanisms:</p>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#configure-the-browser-to-prevent-information-disclosure","title":"Configure the Browser to prevent Information Disclosure","text":"<p>Information disclosure occurs if the browser transmits information over unencrypted channels (HTTP instead of HTTPS) or sends our too much information in the first place (e.g., through the Referer-Header). The following mechanisms reduce the possibility of information disclosure:</p> <ul> <li>HTTP Strict Transport Security (HSTS): Ensures that browsers only connect to your website over HTTPS, preventing SSL stripping attacks.</li> <li>Content Security Policy (CSP): CSP policies can instruct the browser to automatically upgrade HTTP connections to HTTPS. In addition directives such as the form-src directive can be used to prevent forms from transmitting data to external sites.</li> <li>Referrer-Policy: when navigating between pages, the browser\u2019s HTTP request includes the current URL within the outgoing request. This URL can include sensitive information. Using Referrer-Policy, a web-site can unify the browser\u2019s behavior and select which information should be transmitted between web sites.</li> <li>The cookie\u2019s secure flag: while not a HTTP header, this security flag is related to information disclosure. If set, the web browser will not transmit a cookie over unencrypted HTTP transports.</li> </ul>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#reduce-the-potential-impact-of-xss","title":"Reduce the potential Impact of XSS","text":"<p>Javascript based XSS attacks have been very common for decades. To reduce the potential impact of vulnerabilities, browsers offer rich defensive mechanisms that should reduce the potential impact of XSS attacks:</p> <ul> <li>Content Security Policy (CSP): CSP is a powerful tool that helps prevent a wide range of attacks including Cross-Site Scripting (XSS) and data injection. Strict CSP policies can effectively disable inline JavaScript and style, making it much harder for attackers to inject malicious content. Host Allowlist CSP: Blocking all third-party JavaScript can significantly reduce the attack surface and prevent the exploitation of vulnerabilities in third-party libraries. Strict CSP: A CSP utilizing nonces or hashes in the 'script-src' directive (often referred to as \"strict CSP\") provides a robust mitigation against XSS vulnerabilities. Optionally, the use of the CSP 'strict-dynamic' keyword can help to streamline the implementation of a strict CSP and to ensure compatibility with third-party JavaScript libraries when required.     Trusted Types: This is a browser API that helps prevent DOM-based cross-site scripting vulnerabilities by ensuring only secure data types can be inserted into the DOM.</li> <li>The cookie\u2019s httpOnly flag: while not a HTTP header, setting this flag prevents Javascript from accessing this cookie and should be done esp. For Session cookies.</li> </ul>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#prevent-clickjacking","title":"Prevent Clickjacking","text":"<p>Clickjacking, also known as UI-redress attacks, try to confuse users by overlaying a malicious site on top of a benign one. The user believes to interact with the benign one while in reality they are interacting with the malicious one.</p> <ul> <li>X-Frame-Options (XFO): Prevents clickjacking attacks by ensuring your content is not embedded into other sites. This header is finicky to use, e.g., when used twice it is disabled.</li> <li>Content Security Policy (CSP): the different frame-* directives allow for fine-grained control of which sites are allowed to include the current website as well as which other sites can be included within the current website.</li> </ul>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#control-the-browsers-advanced-capabilities","title":"Control the Browser\u2019s Advanced Capabilities","text":"<p>Modern browsers do not only display HTML code but are used to interface with multiple system components such as WebCams, Microphones, USB Devices, etc. While many websites do not utilize those features, attackers can abuse those.</p> <ul> <li>Permission Policy: through a permission policy a web-site can instruct the browser that the defined features will not be used by the web-site. For example, a web-site can state that it will never capture user audio. Even if an attacker is able to inject malicious code, they can thus not instruct the web-browser to capture audio.</li> </ul>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#prevent-csrf-attacks","title":"Prevent CSRF Attacks","text":"<p>CSRF attacks abuse an existing trust relationship between the web browser and web sites.</p> <ul> <li>Same-Origin Cookies: Marking cookies as SameSite can mitigate the risk of cross-origin information leakage, as well as provide some protection against cross-site request forgery attacks.</li> <li>Fetch Metadata Request Headers: Checking Fetch Metadata request headers on the server-side allows deploying a strong defense-in-depth mechanism\u2014a Resource Isolation Policy\u2014to protect your application against common cross-origin attacks like CSRF.</li> </ul>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#vulnerabilities-prevented","title":"Vulnerabilities Prevented","text":"<p>Implementing these browser defenses can help mitigate a range of vulnerabilities, including but not limited to:</p> <ul> <li>Cross-Site Scripting (XSS)</li> <li>Cross-Site Request Forgery (CSRF)</li> <li>Clickjacking</li> <li>Data Theft through insecure transmission</li> <li>Session Hijacking</li> <li>Abusing unintended browser hardware access (microphone, cameras, etc.)</li> </ul>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#tools","title":"Tools","text":"<ul> <li>Web Check</li> <li>Security Headers</li> <li>Mozilla Observatory</li> <li>CSP Evaluator</li> </ul>"},{"location":"the-top-10/c8-help-the-browser-defend-the-user/#references","title":"References","text":"<ul> <li>Content Security Policy (CSP)</li> <li>Strict Content Security Policy</li> <li>Trusted Types</li> <li>OWASP Secure Headers Project</li> <li>Security Headers Quick Reference</li> <li>Fetch Metadata Request Headers</li> <li>Fetch Metadata Resource Isolation Policy</li> <li>Canisue.com</li> </ul>"},{"location":"the-top-10/c9-security-logging-and-monitoring/","title":"C9: Implement Security Logging and Monitoring","text":""},{"location":"the-top-10/c9-security-logging-and-monitoring/#description","title":"Description","text":"<p>Logging is a concept that most developers already use for debugging and diagnostic purposes. Security logging is an equally basic concept: to log security information during the runtime operation of an application. Monitoring is the live review of application and security logs using various forms of automation. The same tools and patterns can be used for operations, debugging and security purposes.</p>"},{"location":"the-top-10/c9-security-logging-and-monitoring/#benefits-of-security-logging","title":"Benefits of Security Logging","text":"<p>Security logging can be used for:</p> <ol> <li>Feeding intrusion detection systems</li> <li>Forensic analysis and investigations</li> <li>Satisfying regulatory compliance requirements</li> </ol>"},{"location":"the-top-10/c9-security-logging-and-monitoring/#logging-for-intrusion-detection-and-response","title":"Logging for Intrusion Detection and Response","text":"<p>Use logging to identify activity that indicates that a user is behaving maliciously. Potentially malicious activity to log includes:</p> <ul> <li>Submitted data that is outside of an expected numeric range.</li> <li>Submitted data that involves changes to data that should not be modifiable (select list, checkbox or other limited entry component).</li> <li>Requests that violate server-side access control rules.</li> <li>A more comprehensive list of possible detection points is available here. When your application encounters such activity, your application should at the very least log the activity and mark it as a high severity issue. Ideally, your application should also respond to a possible identified attack, by for example invalidating the user\u2019s session and locking the user\u2019s account. The response mechanisms allow the software to react in realtime to possible identified attacks.</li> </ul>"},{"location":"the-top-10/c9-security-logging-and-monitoring/#secure-logging-design","title":"Secure Logging Design","text":"<p>Logging solutions must be built and managed in a secure way. Secure Logging design may include the following:</p> <ul> <li>Allow expected characters only and/or encode the input based on the target to prevent log injection attacks. The preferred approach would be that the logging solution performs input escaping instead of dropping data: otherwise the logging solution might discard data which would be needed for a later analysis.</li> <li>Do not log sensitive information. For example, do not log password, session ID, credit cards, or social security numbers.</li> <li>Protect log integrity. An attacker may attempt to tamper with the logs. Therefore, the permission of log files and log changes audit should be considered.</li> <li>Forward logs from distributed systems to a central, secure logging service. This will ensure log data cannot be lost if one node is compromised. This also allows for centralized or even automated monitoring.</li> </ul>"},{"location":"the-top-10/c9-security-logging-and-monitoring/#threats","title":"Threats","text":"<ul> <li>An attacker could perform log injection attacks by manipulating log entries, potentially inserting malicious data or commands into log files.</li> <li>An attacker could gain unauthorized access to sensitive information through overly verbose logging practices that inadvertently capture and store confidential data.</li> <li>An attacker could engage in log tampering to cover tracks of malicious activities, potentially erasing or modifying evidence of their intrusion.</li> <li>An attacker could launch denial of service attacks by overwhelming logging systems with a flood of data, potentially disrupting normal system operations or obscuring other malicious actions.</li> <li>An attacker could gain unauthorized access to log files due to improper access controls, potentially exposing sensitive system information or user data.</li> <li>An attacker could engage in log forging to create false audit trails, potentially misleading investigators or framing innocent parties for malicious activities.</li> <li>An attacker could take advantage of insufficient logging practices to conduct malicious activities without detection, potentially prolonging their unauthorized access to systems.</li> <li>An attacker could exploit log file race conditions in multi-threaded applications, potentially corrupting log data or gaining unauthorized access to sensitive information.</li> <li>An attacker could perform replay attacks using information gleaned from logs, potentially reusing captured data to impersonate legitimate users or repeat authenticated actions.</li> </ul>"},{"location":"the-top-10/c9-security-logging-and-monitoring/#implementation","title":"Implementation","text":"<p>The following is a list of security logging implementation best practices.</p> <ul> <li>Follow a common logging format and approach within the system and across systems of an organization. An example of a common logging framework is the Apache Logging Services which helps provide logging consistency between Java, PHP, .NET, and C++ applications.</li> <li>Do not log too much or too little. For example, make sure to always log the timestamp and identifying information including the source IP and user-id, but be careful not to log private (such as username) or confidential data (such as business data) unless extra care is taken.</li> <li>Pay close attention to time syncing across nodes to ensure that timestamps are consistent.</li> </ul>"},{"location":"the-top-10/c9-security-logging-and-monitoring/#vulnerabilities-prevented","title":"Vulnerabilities Prevented","text":"<ul> <li>Brute-Force Attacks against Login-Mechanisms</li> </ul>"},{"location":"the-top-10/c9-security-logging-and-monitoring/#references","title":"References","text":"<ul> <li>Logging Cheat Sheet</li> <li>OWASP Logging Guide</li> </ul>"},{"location":"the-top-10/c9-security-logging-and-monitoring/#tools","title":"Tools","text":""},{"location":"the-top-10/introduction/","title":"Introduction","text":"<p>For years, developers have suffered through introducing the same security issues into the things they build. The most common issues, which have existed for decades, have been documented by the OWASP Top Ten. Many of the issues in the earliest version still exist in some form today. A mechanism is needed to counter these challenges, and that mechanism is proactive controls.</p> <p>Proactive controls are a catalog of better practices, a set of items developers can embrace and implement in their code bases to avoid many common security issues. Proactive controls provide positive patterns to implement solutions considered secure by design.</p> <p>Imagine working on a web-based software, releasing a new version, and then getting reports that it contained a security vulnerability that is now being exploited in the wild. You are now forced to act reactively: analyzing the vulnerability, fixing it, creating a new software release, and getting it to your users. All this is tedious and a bit awkward, esp. When the security vulnerability was critical.</p> <p>Proactive controls prevent this by focusing on the development itself. Their idea is to prevent common vulnerabilities during an application's inception so that those tedious and embarrassing bug fixes can be avoided altogether. Common knowledge is that a proactive approach will save resources and money in the long run.</p> <p>The OWASP Top 10 Proactive Controls 2024 is a list of security techniques every software architect and developer should know and heed. The main goal of this document is to provide concrete, practical guidance that helps developers build secure software. These techniques should be applied proactively at the early stages of software development to ensure maximum effectiveness.</p> <p>Please note that while complying with best proactive practices will reduce the chance of a vulnerability being in your code, there is no guarantee that code is security-bug free. And that\u2019s okay: You have to break an egg to make an omelet \u2014 the only way of not introducing any security bugs is not to code at all. We accept that while striving to prevent as many security issues as possible.</p>"},{"location":"the-top-10/introduction/#how-this-list-was-created","title":"How this List Was Created","text":"<p>This list was originally created by the current project leads with contributions from several volunteers. The document was then shared globally so even anonymous suggestions could be considered. Hundreds of changes were accepted from this open community process.</p>"},{"location":"the-top-10/introduction/#security-controls","title":"Security Controls","text":"<p>The description of each control has the same structure. The control itself has an unique name preceeded by the control number: Cx: Control Name, e.g., C1: Implement Access Control.</p> <p>Each control has the same sections:</p> <ul> <li>Description: A detailed description of the control including some best practices to consider.</li> <li>Threat(s): A threat or threats that this control counters.</li> <li>Implementation: Best practices and examples to illustrate how to implement each control.</li> <li>Vulnerabilities Prevented: List of prevented vulnerabilities or risks addressed (OWASP TOP 10 Risk, CWE, etc.)</li> <li>References: List of references for further study (OWASP Cheat sheet, Security Hardening Guidelines, etc.)</li> <li>Tools: Set of tools/projects to easily introduce/integrate security controls into your software.</li> </ul>"}]}